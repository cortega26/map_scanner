Metadata-Version: 2.4
Name: map-scanner
Version: 3.0.0
Summary: Enhanced Professional Map Scanner with Advanced OCR
Home-page: https://github.com/your-org/map-scanner
Author: Professional Development Team
Author-email: Professional Development Team <dev@mapscanner.com>
Maintainer-email: Professional Development Team <dev@mapscanner.com>
License: MIT
Project-URL: Homepage, https://github.com/your-org/map-scanner
Project-URL: Documentation, https://map-scanner.readthedocs.io/
Project-URL: Repository, https://github.com/your-org/map-scanner
Project-URL: Bug Tracker, https://github.com/your-org/map-scanner/issues
Keywords: ocr,automation,game,scanner,image-processing,tesseract,opencv,gui-automation,map-scanning
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Games/Entertainment
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Monitoring
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: opencv-python>=4.8.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: Pillow>=10.0.0
Requires-Dist: pytesseract>=0.3.10
Requires-Dist: pyautogui>=0.9.54
Requires-Dist: pywin32>=306
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=7.1.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.3.0; extra == "docs"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# Enhanced Professional Map Scanner v3.0

A modular, professional-grade map scanner for game automation with advanced OCR capabilities, robust error handling, and clean architecture.

## üèóÔ∏è Architecture Overview

This application has been completely refactored from a monolithic script into a clean, modular architecture following software engineering best practices:

### Core Principles Applied

- **SOLID Principles**: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion
- **DRY (Don't Repeat Yourself)**: Eliminated code duplication through shared utilities and base classes
- **KISS (Keep It Simple, Stupid)**: Simple, focused modules with clear responsibilities
- **Zen of Python**: "Flat is better than nested", "Readability counts", "Explicit is better than implicit"
- **PEP-8**: Consistent code formatting and naming conventions

### Module Structure

```
map_scanner/
‚îú‚îÄ‚îÄ __init__.py              # Package initialization and public API
‚îú‚îÄ‚îÄ main.py                  # Application entry point
‚îú‚îÄ‚îÄ config.py                # Configuration and constants
‚îú‚îÄ‚îÄ exceptions.py            # Custom exception hierarchy
‚îú‚îÄ‚îÄ logger_config.py         # Centralized logging setup
‚îú‚îÄ‚îÄ utils.py                 # Reusable utility functions
‚îú‚îÄ‚îÄ window_manager.py        # Window detection and management
‚îú‚îÄ‚îÄ screen_capture.py        # Screen capture operations
‚îú‚îÄ‚îÄ mouse_controller.py      # Mouse movement and interactions
‚îú‚îÄ‚îÄ ocr_engine.py           # OCR processing and image preprocessing
‚îî‚îÄ‚îÄ map_scanner.py          # Main scanner orchestration
```

## üöÄ Key Features

### Enhanced OCR Capabilities
- **Advanced Game Text Recognition**: Specialized preprocessing for white text with black outlines
- **Multi-Strategy Processing**: Tests multiple OCR configurations automatically
- **Quality Assessment**: Intelligent scoring system for optimal settings
- **Alliance Tag Handling**: Smart extraction of player names from tagged text

### Robust Architecture
- **Modular Design**: Each component has a single, clear responsibility
- **Error Handling**: Comprehensive exception hierarchy with graceful degradation
- **Safety Systems**: Built-in fail-safes and boundary checking
- **Signal Handling**: Graceful shutdown on interruption

### Professional Features
- **Adaptive Window Detection**: Automatically adjusts to different screen sizes
- **Natural Mouse Movement**: Realistic movement patterns with variance
- **Comprehensive Logging**: Detailed logging with configurable levels
- **Test Mode**: OCR analysis and performance testing

## üì¶ Installation

### Prerequisites

1. **Python 3.8+**: Ensure you have Python 3.8 or higher installed
2. **Tesseract OCR**: Install Tesseract OCR engine
   - Windows: Download from [UB Mannheim](https://github.com/UB-Mannheim/tesseract/wiki)
   - Add Tesseract to your system PATH

### Install Dependencies

```bash
pip install -r requirements.txt
```

### Package Installation

For development:
```bash
pip install -e .
```

For production:
```bash
pip install .
```

## üéÆ Usage

### Command Line Interface

```bash
# Test mode - analyze OCR performance
python -m map_scanner --test yes

# Normal scanning
python -m map_scanner --targets "PlayerName1,PlayerName2"

# Advanced usage
python -m map_scanner --targets "Player1,Player2" --max-rows 30 --debug
```

### Available Options

- `--targets`: Comma-separated list of target names to search for
- `--window`: Game window title (default: "Last War-Survival Game")
- `--max-rows`: Maximum rows to scan (default: 20)
- `--test`: Enable test mode for OCR analysis (yes/no)
- `--debug`: Enable debug logging
- `--log-file`: Custom log file path

### Programmatic Usage

```python
from map_scanner import MapScanner, create_scanner

# Using the convenience function
scanner = create_scanner("My Game Window")

# Or direct instantiation
scanner = MapScanner("My Game Window")

# Execute scan
results = scanner.execute_scan(
    target_names=["Player1", "Player2"],
    max_rows=25,
    test_mode=False
)

# Process results
for target in results:
    print(f"Found {target['name']} at {target['scan_position']}")
```

## üß™ Testing and Development

### Running Tests

```bash
# Run basic OCR test
python -m map_scanner --test yes

# Run with debug logging
python -m map_scanner --test yes --debug

# Custom test parameters
python -m map_scanner --test yes --window "Custom Window" --log-file test.log
```

### Code Quality

The codebase follows strict quality standards:

```bash
# Code formatting
black map_scanner/

# Linting
flake8 map_scanner/

# Type checking
mypy map_scanner/

# Testing (when test suite is implemented)
pytest tests/
```

## üìä Configuration

### Window Configuration (`WindowConfig`)
- UI margin percentages for different game layouts
- Minimum window size requirements
- Default window titles

### Capture Configuration (`CaptureConfig`)
- Screen capture settings and timing
- Movement delays and variance ranges
- Safety limits and boundaries

### OCR Configuration (`OCRConfig`)
- Tesseract configurations for different text types
- Image preprocessing strategies
- Quality thresholds and scoring weights

### Scan Configuration (`ScanConfig`)
- Default scanning parameters
- Zoom calibration settings
- Movement detection thresholds

## üîß Architecture Details

### Single Responsibility Principle (SRP)

Each module has a focused responsibility:

- **WindowManager**: Window detection, preparation, and area calculations
- **ScreenCapture**: Screenshot operations and movement detection
- **MouseController**: Mouse movements with natural behavior patterns
- **OCREngine**: Text extraction and image preprocessing
- **MapScanner**: High-level orchestration and scanning logic

### Open/Closed Principle (OCP)

The architecture is designed for extension without modification:

- New OCR strategies can be added to `OCRConfig.OCR_STRATEGIES`
- New preprocessing methods can be added to `ImagePreprocessor`
- New exception types can be added to the exception hierarchy

### Dependency Inversion Principle (DIP)

High-level modules depend on abstractions, not concretions:

- `MapScanner` orchestrates specialized components
- Components communicate through well-defined interfaces
- Configuration is externalized and injectable

## üõ°Ô∏è Error Handling

Comprehensive exception hierarchy provides precise error handling:

```python
try:
    scanner = MapScanner()
    results = scanner.execute_scan(targets)
except SafetyExit:
    # User requested stop or safety condition triggered
    pass
except WindowError:
    # Window-related issues
    pass
except OCRError:
    # OCR processing problems
    pass
except MapScannerError:
    # General scanner errors
    pass
```

## üìù Logging

Centralized logging with configurable levels:

- **INFO**: General operation progress
- **DEBUG**: Detailed diagnostic information
- **WARNING**: Non-critical issues
- **ERROR**: Error conditions

Logs are written to both console and file for comprehensive debugging.

## üö¶ Safety Features

- **Fail-safe Mode**: PyAutoGUI fail-safe (move mouse to corner to stop)
- **Boundary Checking**: All mouse movements are validated against window boundaries
- **Signal Handling**: Graceful shutdown on Ctrl+C or system signals
- **Running Flags**: Consistent state checking throughout operations
- **Safety Limits**: Maximum columns/rows to prevent infinite loops

## üîÑ Migration from Original Script

The refactored application maintains full compatibility with the original functionality while providing:

1. **Better Maintainability**: Modular code is easier to debug and modify
2. **Enhanced Reliability**: Improved error handling and safety checks
3. **Extensibility**: New features can be added without affecting existing code
4. **Testability**: Individual components can be tested in isolation
5. **Documentation**: Clear interfaces and comprehensive documentation

## ü§ù Contributing

When contributing to this project:

1. Follow the established architecture patterns
2. Maintain single responsibility for each module
3. Add comprehensive error handling
4. Include appropriate logging
5. Follow PEP-8 code style
6. Add type hints where applicable
7. Update documentation for new features

## üìÑ License

This project is provided as-is for educational and professional development purposes.

---

**Note**: This refactored application demonstrates professional software engineering practices applied to automation tooling. The modular architecture makes it suitable for production environments while maintaining ease of development and testing.
